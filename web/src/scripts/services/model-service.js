/*
 * Copyright (C) 2015 Stratio (http://stratio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
  'use strict';

  angular
    .module('webApp')
    .service('ModelService', ModelService);

  ModelService.$inject = ['ModalService', 'PolicyModelFactory', '$translate', 'ModelFactory', 'CubeService', 'UtilsService'];

  function ModelService(ModalService, PolicyModelFactory, $translate, ModelFactory, CubeService, UtilsService) {
    var vm = this;

    var modelCreationPanel = {};

    vm.showConfirmRemoveModel = showConfirmRemoveModel;
    vm.addModel = addModel;
    vm.isOutputUsed = isOutputUsed;
    vm.cancelEdition = cancelEdition;
    vm.updateModel = updateModel;
    vm.removeModel = removeModel;
    vm.isLastModel = isLastModel;
    vm.isNewModel = isNewModel;
    vm.getModelCreationStatus = getModelCreationStatus;
    vm.changeModelCreationPanelVisibility = changeModelCreationPanelVisibility;
    vm.isActiveModelCreationPanel = isActiveModelCreationPanel;
    vm.activateModelCreationPanel = activateModelCreationPanel;
    vm.disableModelCreationPanel = disableModelCreationPanel;
    vm.resetModel = resetModel;

    init();

    function init() {
      vm.policy = PolicyModelFactory.getCurrentPolicy();
      modelCreationPanel = {
        enabled: false
      };
    }

    function activateModelCreationPanel() {
      modelCreationPanel.enabled = true;
    }

    function disableModelCreationPanel() {
      modelCreationPanel.enabled = false;
    }

    function getModelCreationStatus() {
      return modelCreationPanel;
    }

    function showConfirmRemoveModel(cubeNames) {
      var templateUrl = "templates/modal/confirm-modal.tpl.html";
      var controller = "ConfirmModalCtrl";
      var message = "";
      var extraClass = "";
      var size = "lg";

      if (cubeNames && cubeNames.length > 0) {
        message = $translate.instant('_REMOVE_MODEL_MESSAGE_', {
          modelList: cubeNames.toString()
        });
      }
      var resolve = {
        title: function () {
          return "_REMOVE_MODEL_CONFIRM_TITLE_"
        },
        message: function () {
          return message;
        }
      };
      var modalInstance = ModalService.openModal(controller, templateUrl, resolve, extraClass, size);

      return modalInstance.result;
    }

    function addModel() {
      vm.error = "";
      var modelToAdd = angular.copy(ModelFactory.getModel());
      if (ModelFactory.isValidModel()) {
        if (ModelFactory.isAutoGeneratedDateTime() || ModelFactory.isFilterModel()) {
          delete modelToAdd.inputField;
        }
        vm.policy.transformations.push(modelToAdd);
      }
    }

    function updateModel() {
      vm.error = "";
      var modelToUpdate = angular.copy(ModelFactory.getModel());
      if (ModelFactory.isValidModel()) {
        if (ModelFactory.isAutoGeneratedDateTime() || ModelFactory.isFilterModel()) {
          delete modelToUpdate.inputField;
        }
       vm.policy.transformations[modelToUpdate.order] = modelToUpdate; 
      }
    }

    function cancelEdition(){
      var current = ModelFactory.getModel();
      vm.policy.transformations[current.order] = angular.copy(vm.policy.transformations[current.order]); 
    }

    function removeModel() {
      var modelPosition = ModelFactory.getContext().position;
      //check if there are cubes whose dimensions have model outputFields as fields
      var cubeList = CubeService.findCubesUsingOutputs(vm.policy.transformations[modelPosition].outputFields);

      return showConfirmRemoveModel(cubeList.names).then(function () {
        vm.policy.cubes = UtilsService.removeItemsFromArray(vm.policy.cubes, cubeList.positions);
        vm.policy.transformations.splice(modelPosition, 1);
      });
    }

    function isLastModel(index) {
      return index == vm.policy.transformations.length - 1;
    }

    function isNewModel(index) {
      return index == vm.policy.transformations.length;
    }

    function changeModelCreationPanelVisibility(isVisible) {
      modelCreationPanel.enabled = isVisible;
    }

    function isActiveModelCreationPanel() {
      return modelCreationPanel.enabled;
    }

    function resetModel(template) {
      var modelNumber = vm.policy.transformations.length;
      var order = 0;

      if (modelNumber > 0) {
        order = vm.policy.transformations[modelNumber - 1].order + 1
      }
      ModelFactory.resetModel(template.model, order, vm.policy.transformations.length);
    }

    function isOutputUsed(name){
      var transformations = vm.policy.transformations;
      var l = transformations.length;
      for(var i = 0; i<l; i++){
        if(transformations[i].inputField === name){
          return name;
        }
      }

      var cubes = vm.policy.cubes;
      var lcubes = cubes.length;

      for(var i = 0; i<lcubes; i++) {
        var cube = cubes[i];
        var ldimensions = cube.dimensions.length;
        for(var j = 0; j<ldimensions; j++){
          if(cube.dimensions[j].name === name){
            return name;
          }
        }
      }
      return false;
    }
  }
})();
